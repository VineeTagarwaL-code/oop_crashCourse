1. Class:

    A class is a blueprint or template for creating objects.
    It defines the structure and behavior that objects of that class will have.
    A class may contain data members (attributes) and member functions (methods).
    For example, you might have a class called "Car" with attributes like "make," "model," and methods like "start," "stop," and "accelerate."

Class Example:

In this example, we define a class called Person with attributes name and age, and a method introduce to introduce the person.


public class Person {
    // Attributes
    String name;
    int age;

    // Method
    public void introduce() {
        System.out.println("Hello, my name is " + name + " and I am " + age + " years old.");
    }
}


2. Object:

    An object is an instance of a class. It's a concrete realization of the class blueprint.
    Objects are used to represent and work with real-world entities in a program.
    Each object has its own set of attributes and can perform actions using the methods defined in its class.

Now, let's create objects of the Person class and using the class declared above 

public class Main {
    public static void main(String[] args) {
        // Creating objects
        Person person1 = new Person();
        Person person2 = new Person();

        // Setting attributes
        person1.name = "Alice";
        person1.age = 30;

        person2.name = "Bob";
        person2.age = 25;

        // Calling methods
        person1.introduce(); // Output: Hello, my name is Alice and I am 30 years old.
        person2.introduce(); // Output: Hello, my name is Bob and I am 25 years old.
    }
}


